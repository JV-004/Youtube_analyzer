import os
import sys
from pathlib import Path
from datetime import datetime

# Importa nossas classes
from downloader import YouTubeDownloader
from converter import AudioConverter
from transcriber import AudioTranscriber
from summarizer import TextSummarizer
from utils import (
    create_directories, 
    validate_youtube_url, 
    cleanup_temp_files,
    sanitize_filename
)

class YouTubeAnalyzer:
    def __init__(self, google_api_key=None):
        """
        Classe principal que coordena todo o processo
        Args:
            google_api_key (str): Chave da API Google
        """
        print("üöÄ Inicializando Analisador de V√≠deos do YouTube com Google Gemini...")
        
        create_directories()
        
        self.downloader = YouTubeDownloader()
        self.converter = AudioConverter()
        
        try:
            self.transcriber = AudioTranscriber(google_api_key)
            self.summarizer = TextSummarizer(google_api_key)
            print("‚úÖ Componentes inicializados com sucesso!")
        except ValueError as e:
            print(f"‚ùå Erro na configura√ß√£o: {e}")
            print("üí° Dica: Configure sua API Key do Google Gemini")
            sys.exit(1)
    
    def analyze_video(self, youtube_url, summary_type='structured', target_language=None, source_language=None):
        """
        Executa an√°lise completa do v√≠deo com suporte a tradu√ß√£o
        Args:
            youtube_url (str): URL do v√≠deo do YouTube
            summary_type (str): Tipo de resumo (structured, bullet_points, paragraph)
            target_language (str): Idioma desejado para sa√≠da (pt, en, es, fr)
            source_language (str): Idioma original do √°udio (opcional)
        """
        print("\n" + "="*60)
        print("üé¨ INICIANDO AN√ÅLISE DE V√çDEO - POWERED BY GEMINI")
        if target_language:
            print(f"üåê IDIOMA DE SA√çDA: {target_language.upper()}")
        print("="*60)
        
        if not validate_youtube_url(youtube_url):
            print("‚ùå URL do YouTube inv√°lida")
            return None
        
        try:
            # Passo 1: Obter informa√ß√µes do v√≠deo
            print("\nüìã PASSO 1: Obtendo informa√ß√µes do v√≠deo...")
            video_info = self.downloader.get_video_info(youtube_url)
            if not video_info:
                return None
            
            # Passo 2: Download do √°udio
            print("\n‚¨áÔ∏è PASSO 2: Fazendo download do √°udio...")
            audio_path = self.downloader.download_audio(youtube_url)
            if not audio_path:
                return None
            
            # Passo 3: Convers√£o do √°udio
            print("\nüîÑ PASSO 3: Convertendo √°udio para formato otimizado...")
            converted_path = self.converter.optimize_for_gemini(audio_path)
            if not converted_path:
                print("‚ùå Falha na convers√£o do √°udio")
                return None
            
            # Passo 4: Transcri√ß√£o com Gemini (COM TRADU√á√ÉO)
            translation_msg = f" e traduzindo para {target_language}" if target_language else ""
            print(f"\nüé§ PASSO 4: Transcrevendo √°udio{translation_msg} com Gemini...")
            
            transcript_data = self.transcriber.transcribe_audio(
                converted_path, 
                language=target_language,
                source_language=source_language
            )
            if not transcript_data:
                return None
            
            # Passo 5: Gera√ß√£o do resumo com Gemini (NO IDIOMA ESCOLHIDO)
            print(f"\nüìù PASSO 5: Gerando resumo com Gemini...")
            if target_language:
                print(f"üåê Resumo ser√° gerado em: {target_language}")
                
            summary_data = self.summarizer.create_summary(
                transcript_data['text'], 
                summary_type,
                target_language=target_language
            )
            if not summary_data:
                return None
            
            # Passo 6: An√°lise adicional (NO IDIOMA ESCOLHIDO)
            print("\nüîç PASSO 6: Executando an√°lise detalhada...")
            analysis_data = self.summarizer.analyze_content(
                transcript_data['text'],
                target_language=target_language
            )
            
            # Combina todos os resultados
            final_result = {
                'video_info': video_info,
                'transcript': transcript_data,
                'summary': summary_data,
                'analysis': analysis_data,
                'processing_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'ai_provider': 'Google Gemini',
                'language_settings': {
                    'source_language': source_language,
                    'target_language': target_language
                },
                'files_processed': {
                    'original_audio': audio_path,
                    'converted_audio': converted_path
                }
            }
            
            # Passo 7: Salvar resultados
            print("\nüíæ PASSO 7: Salvando resultados...")
            self._save_results(final_result, video_info['title'])
            
            print("\n" + "="*60)
            print("‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO! ü§ñ GEMINI")
            if target_language:
                print(f"üåê CONTE√öDO GERADO EM: {target_language.upper()}")
            print("="*60)
            
            return final_result
            
        except Exception as e:
            print(f"\n‚ùå Erro durante an√°lise: {e}")
            print(f"\nüîç Detalhes do erro: {type(e).__name__}")
            import traceback
            traceback.print_exc()
            return None
        finally:
            print("\nüßπ Limpando arquivos tempor√°rios...")
            cleanup_temp_files()
    
    def _save_results(self, result_data, video_title):
        """Salva todos os resultados em arquivos"""
        try:
            safe_title = sanitize_filename(video_title)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # Adiciona sufixo de idioma se tradu√ß√£o foi aplicada
            language_suffix = ""
            if result_data['language_settings']['target_language']:
                language_suffix = f"_{result_data['language_settings']['target_language']}"
                
            base_filename = f"{safe_title}_{timestamp}{language_suffix}"
            
            # Cria diret√≥rio output se n√£o existir
            output_dir = Path("output")
            output_dir.mkdir(exist_ok=True)
            
            # Salva transcri√ß√£o
            transcript_path = output_dir / f"{base_filename}_transcricao_gemini.txt"
            self.transcriber.save_transcript(result_data['transcript'], str(transcript_path))
            
            # Salva resumo com an√°lise
            summary_path = output_dir / f"{base_filename}_resumo_gemini.md"
            summary_data_with_analysis = result_data['summary'].copy()
            if result_data['analysis']:
                summary_data_with_analysis['analysis'] = result_data['analysis']['analysis']
            
            self.summarizer.save_summary(
                summary_data_with_analysis, 
                str(summary_path), 
                include_analysis=True
            )
            
            # Salva relat√≥rio completo
            report_path = output_dir / f"{base_filename}_relatorio_completo_gemini.md"
            self._create_full_report(result_data, str(report_path))
            
            print(f"üìÅ Arquivos salvos com prefixo: {base_filename}")
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar resultados: {e}")
    
    def _create_full_report(self, data, output_path):
        """Cria relat√≥rio completo"""
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write("# üé¨ RELAT√ìRIO COMPLETO - AN√ÅLISE COM GOOGLE GEMINI\n\n")
                
                # Informa√ß√µes do v√≠deo
                f.write("## üì∫ Informa√ß√µes do V√≠deo\n\n")
                video_info = data['video_info']
                f.write(f"**T√≠tulo:** {video_info['title']}\n")
                f.write(f"**Canal:** {video_info['author']}\n")
                f.write(f"**Dura√ß√£o:** {video_info['duration_formatted']}\n")
                f.write(f"**Visualiza√ß√µes:** {video_info['views']:,}\n")
                f.write(f"**Descri√ß√£o:** {video_info['description']}\n\n")
                
                # Configura√ß√µes de idioma
                f.write("## üåê Configura√ß√µes de Idioma\n\n")
                lang_settings = data['language_settings']
                source_lang = lang_settings.get('source_language', 'Auto-detectado')
                target_lang = lang_settings.get('target_language', 'Original')
                f.write(f"**Idioma do √°udio:** {source_lang}\n")
                f.write(f"**Idioma de sa√≠da:** {target_lang}\n")
                if target_lang != 'Original' and source_lang != target_lang:
                    f.write("**‚ú® Tradu√ß√£o aplicada:** Sim\n")
                f.write("\n")
                
                # Dados t√©cnicos
                f.write("## ‚öôÔ∏è Dados T√©cnicos\n\n")
                f.write(f"**Data do processamento:** {data['processing_time']}\n")
                f.write(f"**Provedor de IA:** {data['ai_provider']}\n")
                f.write(f"**Modelo de transcri√ß√£o:** {data['transcript']['model_used']}\n")
                f.write(f"**Modelo de resumo:** {data['summary']['model_used']}\n")
                f.write(f"**Taxa de compress√£o:** {data['summary']['compression_ratio']:.1%}\n\n")
                
                # An√°lise detalhada
                if data['analysis']:
                    f.write("## üîç An√°lise Detalhada\n\n")
                    f.write(data['analysis']['analysis'])
                    f.write("\n\n")
                
                # Resumo
                f.write("## üìã Resumo\n\n")
                f.write(data['summary']['summary'])
                f.write("\n\n")
                
                # Transcri√ß√£o completa
                f.write("## üìù Transcri√ß√£o Completa\n\n")
                f.write(data['transcript']['text'])
            
            print(f"üìä Relat√≥rio completo salvo: {output_path}")
        except Exception as e:
            print(f"‚ùå Erro ao criar relat√≥rio: {e}")

def main():
    """Fun√ß√£o principal - interface de linha de comando"""
    print("üéØ ANALISADOR DE V√çDEOS DO YOUTUBE - GOOGLE GEMINI")
    print("="*60)
    
    # Verificar API Key do Google
    api_key = os.getenv('GOOGLE_API_KEY')
    if not api_key:
        print("üîë Configure sua API Key do Google Gemini:")
        print("   1. Acesse: https://aistudio.google.com/app/apikey")
        print("   2. Crie uma nova API Key")
        print("   3. Crie arquivo .env na pasta do projeto")
        print("   4. Adicione: GOOGLE_API_KEY=sua_chave_aqui")
        print("   OU")
        api_key = input("   Digite sua API Key agora: ").strip()
        
        if not api_key:
            print("‚ùå API Key √© obrigat√≥ria!")
            sys.exit(1)
    
    # Inicializa analisador
    try:
        analyzer = YouTubeAnalyzer(api_key)
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        sys.exit(1)
    
    # Interface de usu√°rio
    while True:
        print("\n" + "-"*60)
        print("üìã MENU DE OP√á√ïES - POWERED BY GEMINI:")
        print("1. üé¨ Analisar v√≠deo do YouTube")
        print("2. üìä Ver informa√ß√µes da API")
        print("3. ‚ùå Sair")
        
        choice = input("\nEscolha uma op√ß√£o: ").strip()
        
        if choice == '1':
            # Coleta informa√ß√µes do usu√°rio
            url = input("\nüîó Cole a URL do YouTube: ").strip()
            
            if not url:
                print("‚ùå URL n√£o pode estar vazia!")
                continue
            
            # Op√ß√µes de idioma
            print("\nüåê CONFIGURA√á√ÉO DE IDIOMAS:")
            print("üí° Dica: Voc√™ pode transcrever E traduzir ao mesmo tempo!")
            
            # Idioma do √°udio (opcional)
            print("\nüé§ Idioma do √°udio original:")
            print("1. Auto-detectar (padr√£o)")
            print("2. Portugu√™s")
            print("3. Ingl√™s")
            print("4. Espanhol")
            print("5. Franc√™s")
            
            source_choice = input("Escolha (1-5, Enter para auto): ").strip()
            source_languages = {
                '2': 'pt', '3': 'en', '4': 'es', '5': 'fr'
            }
            source_language = source_languages.get(source_choice)
            
            # Idioma de sa√≠da
            print("\nüìù Idioma para transcri√ß√£o e resumo:")
            print("1. Mesmo do √°udio")
            print("2. Portugu√™s")
            print("3. Ingl√™s")
            print("4. Espanhol")
            print("5. Franc√™s")
            
            target_choice = input("Escolha (1-5): ").strip()
            target_languages = {
                '2': 'pt', '3': 'en', '4': 'es', '5': 'fr'
            }
            target_language = target_languages.get(target_choice)
            
            # Mostra configura√ß√£o escolhida
            if target_language:
                lang_names = {'pt': 'Portugu√™s', 'en': 'Ingl√™s', 'es': 'Espanhol', 'fr': 'Franc√™s'}
                print(f"\n‚ú® Sa√≠da ser√° em: {lang_names[target_language]}")
                if source_language and source_language != target_language:
                    print(f"üîÑ Tradu√ß√£o: {lang_names[source_language]} ‚Üí {lang_names[target_language]}")
            
            # Op√ß√µes de resumo
            print("\nüìù Tipos de resumo dispon√≠veis:")
            print("1. Estruturado (padr√£o)")
            print("2. Lista de t√≥picos")
            print("3. Par√°grafo √∫nico")
            
            summary_choice = input("Escolha o tipo (1-3, Enter para padr√£o): ").strip()
            summary_types = {
                '1': 'structured',
                '2': 'bullet_points', 
                '3': 'paragraph'
            }
            summary_type = summary_types.get(summary_choice, 'structured')
            
            # Executa an√°lise
            print(f"\nüöÄ Iniciando an√°lise com Google Gemini...")
            result = analyzer.analyze_video(
                url, 
                summary_type, 
                target_language=target_language,
                source_language=source_language
            )
            
            if result:
                print("\nüéâ An√°lise conclu√≠da! Verifique a pasta 'output' para os resultados.")
                
                # Mostra preview do resumo
                print("\nüìã PREVIEW DO RESUMO:")
                print("-" * 50)
                preview = result['summary']['summary'][:500]
                print(preview + "..." if len(result['summary']['summary']) > 500 else preview)
                print("-" * 50)
                
                # Estat√≠sticas
                print(f"\nüìä ESTAT√çSTICAS:")
                print(f"üéØ Provedor: {result['ai_provider']}")
                if result['language_settings']['target_language']:
                    print(f"üåê Idioma de sa√≠da: {result['language_settings']['target_language']}")
                print(f"üìù Caracteres transcritos: {len(result['transcript']['text']):,}")
                print(f"üìã Caracteres do resumo: {len(result['summary']['summary']):,}")
                print(f"üìâ Taxa de compress√£o: {result['summary']['compression_ratio']:.1%}")
            else:
                print("\n‚ùå Falha na an√°lise. Verifique os logs acima.")
        
        elif choice == '2':
            print("\nüìä INFORMA√á√ïES DA API GOOGLE GEMINI:")
            print("üîó Dashboard: https://aistudio.google.com/")
            print("üí∞ Pre√ßos: https://ai.google.dev/pricing")
            print("üìö Documenta√ß√£o: https://ai.google.dev/docs")
            print("\n‚úÖ VANTAGENS DO GEMINI:")
            print("‚Ä¢ API gratuita mais generosa")
            print("‚Ä¢ 60 requisi√ß√µes por minuto (gratuito)")
            print("‚Ä¢ Suporte nativo a √°udio")
            print("‚Ä¢ Modelos multimodais")
            print("‚Ä¢ Sem cobran√ßa por tokens de entrada")
            print("\nüåê IDIOMAS SUPORTADOS:")
            print("‚Ä¢ Portugu√™s, Ingl√™s, Espanhol, Franc√™s")
            print("‚Ä¢ Tradu√ß√£o autom√°tica entre idiomas")
            print("‚Ä¢ Detec√ß√£o autom√°tica do idioma do √°udio")
        
        elif choice == '3':
            print("\nüëã At√© logo! Obrigado por usar o Analisador com Gemini!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()