"""
Arquivo: downloader.py
Fun√ß√£o: Baixa √°udio de v√≠deos do YouTube usando pytubefix
"""

from pytubefix import YouTube
from pathlib import Path
import os
from utils import sanitize_filename, format_duration

class YouTubeDownloader:
    def __init__(self, output_dir='temp_files'):
        """
        Inicializa o downloader
        Args:
            output_dir (str): Diret√≥rio para salvar arquivos
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
    def get_video_info(self, url):
        """
        Obt√©m informa√ß√µes do v√≠deo sem baixar
        Args:
            url (str): URL do v√≠deo YouTube
        Returns:
            dict: Informa√ß√µes do v√≠deo
        """
        try:
            yt = YouTube(url)
            
            info = {
                'title': yt.title,
                'duration': yt.length,
                'duration_formatted': format_duration(yt.length),
                'author': yt.author,
                'views': yt.views,
                'description': yt.description[:200] + '...' if len(yt.description) > 200 else yt.description
            }
            
            print(f"üì∫ T√≠tulo: {info['title']}")
            print(f"‚è±Ô∏è Dura√ß√£o: {info['duration_formatted']}")
            print(f"üë§ Canal: {info['author']}")
            print(f"üëÅÔ∏è Visualiza√ß√µes: {info['views']:,}")
            
            return info
            
        except Exception as e:
            print(f"‚ùå Erro ao obter informa√ß√µes do v√≠deo: {e}")
            return None
        
    def download_audio(self, url):
        """
        Baixa apenas o √°udio do v√≠deo
        Args:
            url (str): URL do v√≠deo YouTube
        Returns:
            str: Caminho do arquivo baixado ou None se erro
        """
        try:
            print("üîÑ Iniciando download...")
            yt = YouTube(url)
            
            # Seleciona stream de √°udio apenas (mais eficiente)
            audio_stream = yt.streams.filter(only_audio=True).first()
            
            if not audio_stream:
                print("‚ùå Nenhum stream de √°udio encontrado")
                return None
            
            # Nome do arquivo limpo
            filename = sanitize_filename(yt.title)
            
            print(f"‚¨áÔ∏è Baixando: {yt.title}")
            print(f"üìÅ Formato: {audio_stream.mime_type}")
            print(f"üìè Tamanho: {audio_stream.filesize / 1024 / 1024:.1f} MB")
            
            # Download do arquivo
            output_path = audio_stream.download(
                output_path=self.output_dir,
                filename=f"{filename}.{audio_stream.subtype}"
            )
            
            print(f"‚úÖ Download conclu√≠do: {Path(output_path).name}")
            return output_path
            
        except Exception as e:
            print(f"‚ùå Erro no download: {e}")
            return None
        
    def download_with_progress(self, url, progress_callback=None):
        """
        Download com callback de progresso (vers√£o avan√ßada)
        Args:
            url (str): URL do v√≠deo
            progress_callback (function): Fun√ß√£o para mostrar progresso
        Returns:
            str: Caminho do arquivo baixado
        """
        def on_progress(stream, chunk, bytes_remaining):
            total_size = stream.filesize
            bytes_downloaded = total_size - bytes_remaining
            percentage = bytes_downloaded / total_size * 100
            
            if progress_callback:
                progress_callback(percentage)
            else:
                print(f"\rüì• Progresso: {percentage:.1f}%", end='', flush=True)
        
        try:
            yt = YouTube(url, on_progress_callback=on_progress)
            audio_stream = yt.streams.filter(only_audio=True).first()
            
            filename = sanitize_filename(yt.title)
            output_path = audio_stream.download(
                output_path=self.output_dir,
                filename=f"{filename}.{audio_stream.subtype}"
            )
            
            print("\n‚úÖ Download conclu√≠do com sucesso!")
            return output_path
            
        except Exception as e:
            print(f"\n‚ùå Erro no download: {e}")
            return None
