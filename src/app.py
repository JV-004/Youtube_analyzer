# app.py (VERS√ÉO CORRIGIDA COM TRADU√á√ÉO)
import streamlit as st
import os
import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz do projeto ao sys.path para que os m√≥dulos possam ser encontrados
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from main import YouTubeAnalyzer  # Importa a classe principal do seu projeto
from utils import cleanup_temp_files, validate_youtube_url # Importa fun√ß√µes √∫teis

# Configura√ß√µes iniciais do Streamlit
st.set_page_config(
    page_title="Analisador de V√≠deos YouTube com Gemini",
    page_icon="ü§ñ",
    layout="centered"
)

# --- T√≠tulo e Descri√ß√£o do Aplicativo ---
st.title("üé¨ Analisador de V√≠deos do YouTube com Google Gemini")
st.markdown("""
Este aplicativo utiliza a IA Gemini do Google para:
- Baixar o √°udio de v√≠deos do YouTube.
- Transcrever e traduzir o √°udio para texto.
- Gerar resumos detalhados e an√°lises do conte√∫do em qualquer idioma.
""")
st.info("üí° **Aten√ß√£o:** Certifique-se de que sua `GOOGLE_API_KEY` esteja configurada como uma vari√°vel de ambiente ou inserida abaixo.")

# --- Entrada da API Key (se n√£o estiver em .env) ---
api_key_env = os.getenv('GOOGLE_API_KEY')
if api_key_env:
    st.sidebar.success("‚úÖ `GOOGLE_API_KEY` encontrada como vari√°vel de ambiente!")
    google_api_key = api_key_env
else:
    st.sidebar.warning("‚ö†Ô∏è `GOOGLE_API_KEY` n√£o encontrada como vari√°vel de ambiente.")
    google_api_key = st.sidebar.text_input("Cole sua Google API Key aqui:", type="password")
    if not google_api_key:
        st.sidebar.error("Por favor, insira sua API Key para continuar.")
        st.stop() # Para a execu√ß√£o se a API Key n√£o for fornecida

# --- Inicializa√ß√£o do Analisador ---
@st.cache_resource # Cacheia a inicializa√ß√£o para n√£o recriar a classe a cada rerun
def get_youtube_analyzer(api_key):
    try:
        return YouTubeAnalyzer(google_api_key=api_key)
    except ValueError as e:
        st.error(f"‚ùå Erro na inicializa√ß√£o do Analisador: {e}")
        st.warning("Verifique sua Google API Key e tente novamente.")
        return None

analyzer = get_youtube_analyzer(google_api_key)

if not analyzer:
    st.stop() # Para se o analisador n√£o puder ser inicializado

# --- Formul√°rio Principal ---
st.header("Analisar Novo V√≠deo")

youtube_url = st.text_input("üîó Cole a URL do V√≠deo do YouTube aqui:", placeholder="Ex: https://www.youtube.com/watch?v=xxxxxxxx")

# Configura√ß√µes de idioma
st.subheader("üåê Configura√ß√µes de Idioma")

col1, col2 = st.columns(2)

with col1:
    source_language_options = {
        "Auto-detectar": None,
        "Portugu√™s": "pt",
        "Ingl√™s": "en",
        "Espanhol": "es",
        "Franc√™s": "fr"
    }
    selected_source_language_display = st.selectbox(
        "üé§ Idioma do √°udio (original):",
        list(source_language_options.keys()),
        help="Idioma em que o v√≠deo est√° falado"
    )
    source_language = source_language_options[selected_source_language_display]

with col2:
    target_language_options = {
        "Mesmo do √°udio": None,
        "Portugu√™s": "pt",
        "Ingl√™s": "en", 
        "Espanhol": "es",
        "Franc√™s": "fr"
    }
    selected_target_language_display = st.selectbox(
        "üìù Idioma da transcri√ß√£o/resumo:",
        list(target_language_options.keys()),
        index=1,  # Padr√£o para Portugu√™s
        help="Idioma em que voc√™ quer receber a transcri√ß√£o e resumo"
    )
    target_language = target_language_options[selected_target_language_display]

# Mostra info sobre tradu√ß√£o
if source_language and target_language and source_language != target_language:
    st.success(f"‚ú® **Tradu√ß√£o ativada:** {selected_source_language_display} ‚Üí {selected_target_language_display}")
elif target_language:
    st.info(f"üîÑ **Transcri√ß√£o em:** {selected_target_language_display}")

# Op√ß√µes de resumo
st.subheader("üìù Op√ß√µes de Resumo")
summary_type_options = {
    "Estruturado (Padr√£o)": "structured",
    "Lista de T√≥picos": "bullet_points",
    "Par√°grafo √önico": "paragraph"
}
selected_summary_type_display = st.selectbox(
    "üìã Escolha o tipo de resumo:",
    list(summary_type_options.keys())
)
summary_type = summary_type_options[selected_summary_type_display]

if st.button("üöÄ Iniciar An√°lise", type="primary"):
    if not youtube_url:
        st.error("Por favor, insira uma URL do YouTube.")
    elif not validate_youtube_url(youtube_url):
        st.error("URL do YouTube inv√°lida. Verifique o formato.")
    else:
        st.markdown("---")
        st.write("Iniciando an√°lise...")
        
        # Usar st.empty() para atualizar mensagens de progresso
        status_message = st.empty()
        progress_bar = st.progress(0)
        
        try:
            # Chama o m√©todo analyze_video da sua classe YouTubeAnalyzer
            with st.spinner("Processando... Isso pode levar alguns minutos."):
                
                # Passo 1: Informa√ß√µes do v√≠deo
                status_message.info("üìã Obtendo informa√ß√µes do v√≠deo...")
                progress_bar.progress(10)
                
                video_info = analyzer.downloader.get_video_info(youtube_url)
                if not video_info:
                    st.error("‚ùå N√£o foi poss√≠vel obter informa√ß√µes do v√≠deo.")
                    st.stop()
                
                # Passo 2: Download
                status_message.info("‚¨áÔ∏è Baixando √°udio do YouTube...")
                progress_bar.progress(25)
                
                audio_path = analyzer.downloader.download_audio(youtube_url)
                if not audio_path:
                    st.error("‚ùå Falha no download do √°udio.")
                    st.stop()

                # Passo 3: Convers√£o
                status_message.info("üîÑ Convertendo e otimizando √°udio para Gemini...")
                progress_bar.progress(40)
                
                converted_path = analyzer.converter.optimize_for_gemini(audio_path)
                if not converted_path:
                    st.error("‚ùå Falha na convers√£o do √°udio para o formato Gemini.")
                    st.stop()

                # Passo 4: Transcri√ß√£o/Tradu√ß√£o
                translation_msg = f" e traduzindo para {selected_target_language_display}" if target_language else ""
                status_message.info(f"üé§ Transcrevendo √°udio{translation_msg} com Google Gemini...")
                progress_bar.progress(60)
                
                # CHAMA M√âTODO CORRIGIDO COM PAR√ÇMETROS DE IDIOMA
                transcript_data = analyzer.transcriber.transcribe_audio(
                    converted_path, 
                    language=target_language,
                    source_language=source_language
                )
                if not transcript_data:
                    st.error("‚ùå Falha na transcri√ß√£o do √°udio.")
                    st.stop()

                # Passo 5: Resumo
                status_message.info("üìù Gerando resumo e an√°lise com Google Gemini...")
                progress_bar.progress(80)
                
                # CHAMA M√âTODO CORRIGIDO COM IDIOMA
                summary_data = analyzer.summarizer.create_summary(
                    transcript_data['text'], 
                    summary_type,
                    target_language=target_language
                )
                
                # AN√ÅLISE TAMB√âM COM IDIOMA
                analysis_data = analyzer.summarizer.analyze_content(
                    transcript_data['text'],
                    target_language=target_language
                )

                # Combina e exibe os resultados
                final_result = {
                    'video_info': video_info,
                    'transcript': transcript_data,
                    'summary': summary_data,
                    'analysis': analysis_data,
                    'ai_provider': 'Google Gemini',
                    'language_settings': {
                        'source_language': source_language,
                        'target_language': target_language
                    }
                }
                
                progress_bar.progress(100)

            status_message.success("‚úÖ An√°lise conclu√≠da com sucesso!")
            
            st.subheader("üìä Resultados da An√°lise")

            # Info do v√≠deo
            if final_result['video_info']:
                st.markdown("### üì∫ Informa√ß√µes do V√≠deo")
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**T√≠tulo:** {final_result['video_info']['title']}")
                    st.write(f"**Canal:** {final_result['video_info']['author']}")
                with col2:
                    st.write(f"**Dura√ß√£o:** {final_result['video_info']['duration_formatted']}")
                    st.write(f"**Visualiza√ß√µes:** {final_result['video_info']['views']:,}")
                    
                with st.expander("Ver Descri√ß√£o Original"):
                    st.write(final_result['video_info']['description'])
            
            # Info de idioma
            st.markdown("### üåê Configura√ß√µes de Idioma")
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**Idioma do √°udio:** {selected_source_language_display}")
            with col2:
                st.write(f"**Idioma de sa√≠da:** {selected_target_language_display}")
            
            if source_language and target_language and source_language != target_language:
                st.success("‚ú® **Tradu√ß√£o aplicada com sucesso!**")
            
            # Resumo
            if final_result['summary']:
                st.markdown("### üìã Resumo Gerado por IA")
                st.markdown(final_result['summary']['summary'])
                
                st.markdown("---")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.write(f"**Modelo:** {final_result['summary']['model_used']}")
                with col2:
                    st.write(f"**Tipo:** {final_result['summary']['summary_type'].replace('_', ' ').title()}")
                with col3:
                    st.write(f"**Compress√£o:** {final_result['summary']['compression_ratio']:.1%}")

            # An√°lise detalhada
            if final_result['analysis'] and final_result['analysis']['analysis']:
                st.markdown("### üîç An√°lise Detalhada (Gerada por IA)")
                st.markdown(final_result['analysis']['analysis'])
                st.write(f"**Modelo de An√°lise:** {final_result['analysis']['model_used']}")

            # Transcri√ß√£o completa
            if final_result['transcript']:
                with st.expander("Ver Transcri√ß√£o Completa"):
                    st.markdown("### üìù Transcri√ß√£o Completa")
                    st.text_area(
                        "Transcri√ß√£o:",
                        final_result['transcript']['text'],
                        height=300,
                        disabled=True,
                        label_visibility="collapsed"
                    )
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write(f"**Caracteres:** {len(final_result['transcript']['text']):,}")
                    with col2:
                        st.write(f"**Idioma:** {final_result['transcript'].get('language', 'Auto-detectado')}")

            st.markdown("---")
            st.success("‚úÖ Processo conclu√≠do! Os arquivos de sa√≠da tamb√©m foram salvos na pasta `output/` do projeto.")

        except Exception as e:
            st.error(f"‚ùå Ocorreu um erro durante a an√°lise: {e}")
            st.exception(e) # Exibe o traceback completo para depura√ß√£o
        finally:
            st.write("üßπ Limpando arquivos tempor√°rios...")
            cleanup_temp_files()
            st.write("‚úÖ Limpeza conclu√≠da.")

# --- Informa√ß√µes da API na barra lateral ---
st.sidebar.markdown("---")
st.sidebar.header("üìä Informa√ß√µes da API Google Gemini")
st.sidebar.markdown("""
- **Dashboard:** [aistudio.google.com](https://aistudio.google.com/)
- **Pre√ßos:** [ai.google.dev/pricing](https://ai.google.dev/pricing)
- **Documenta√ß√£o:** [ai.google.dev/docs](https://ai.google.dev/docs)
""")

st.sidebar.markdown("---")
st.sidebar.header("üåê Idiomas Suportados")
st.sidebar.markdown("""
**Transcri√ß√£o + Tradu√ß√£o:**
- üáßüá∑ Portugu√™s
- üá∫üá∏ Ingl√™s
- üá™üá∏ Espanhol
- üá´üá∑ Franc√™s

**Outros idiomas:** O Gemini pode processar mais idiomas automaticamente.
""")

st.sidebar.markdown("---")
st.sidebar.markdown("Feito com ‚ù§Ô∏è e Google Gemini")